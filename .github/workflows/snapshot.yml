name: Snapshot Build

on:
  push:
    branches:
      - "master"
    paths-ignore:
      - ".github/**"
      - "**/*.md"

jobs:

  snapshot:

    name: Snapshot Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Update dependencies
        run: |
          cargo update

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross
        uses: actions-rs/install@v0.1
        with:
          crate: cross
          version: latest
          use-tool-cache: true

      - name: Build Windows release
        env:
          RUSTFLAGS: "-Ctarget-feature=+crt-static,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+fma,+popcnt,+lzcnt,+pclmul,+cmov,+cx8,+cx16,+avx,+aes"
          WRAPPE_TARGETS: "x86_64-pc-windows-gnu;x86_64-unknown-linux-musl"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-pc-windows-gnu
          use-cross: true

      - name: Build Linux release
        env:
          RUSTFLAGS: "-Ctarget-feature=+crt-static,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+fma,+popcnt,+lzcnt,+pclmul,+cmov,+cx8,+cx16,+avx,+aes"
          WRAPPE_TARGETS: "x86_64-pc-windows-gnu;x86_64-unknown-linux-musl"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-unknown-linux-musl
          use-cross: true

      - name: Collect executables
        run: |
          mv target/x86_64-pc-windows-gnu/release/wrappe.exe wrappe-windows.exe
          mv target/x86_64-unknown-linux-musl/release/wrappe wrappe-linux

      - name: Upload release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: snapshot
          prerelease: false
          title: Snapshot
          files: |
            wrappe-windows.exe
            wrappe-linux

  macos:

    name: Snapshot Build (macOS)
    runs-on: macos-latest
    needs: snapshot

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          profile: minimal
          default: true

      - name: Update dependencies
        run: |
          cargo update

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: macos-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          version: latest
          use-tool-cache: true

      - name: Build macOS release
        env:
          RUSTFLAGS: "-Ctarget-feature=+crt-static,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+fma,+popcnt,+lzcnt,+pclmul,+cmov,+cx8,+cx16,+avx,+aes"
          RUSTC_WRAPPER: sccache
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-apple-darwin

      - name: Collect executables
        run: |
          mv target/x86_64-apple-darwin/release/wrappe wrappe-macos

      - name: Get release
        uses: octokit/request-action@v2.x
        id: get_snapshot_release
        with:
            route: GET /repos/Systemcluster/wrappe/releases/tags/snapshot
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get upload url
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env:
          response:  ${{ steps.get_snapshot_release.outputs.data }}

      - name: Upload release
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_upload_url.outputs.url }}
          asset_path: wrappe-macos
          asset_name: wrappe-macos
          asset_content_type: application/octet-stream
